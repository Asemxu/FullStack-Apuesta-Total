---
import { ClientRouter } from "astro:transitions";
import Header from "@/components/shared/header.astro"
import { actions } from 'astro:actions';
import MainContainer from "@/components/shared/mainContainer.astro"
export const prerender = false;
let user
const { isUser} = Astro.props;
const { data } = await Astro.callAction(actions.getCookies,{}) || {};

if(data){
	user = JSON.parse(data.value)
}
---

<!doctype html>
<html lang="en">
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>FullStack Apuesta Total</title>
		<ClientRouter/>
	</head>
	<body class="h-screen flex flex-col justify-center">
		{
			isUser && (
				<Header server:defer user={user}/>
				<MainContainer server:defer typeUser={user?.role}>
					<slot />
				</MainContainer>
				
			)
		}
		{!isUser && <slot />}
	</body>
</html>
<script>
import "toastify-js/src/toastify.css"
import { navigate } from "astro:transitions/client";
import isValidLogin from "@/validators/isValidLogin"
import type { Validation } from "@/interfaces/validation";
import showError from "@/utils/showError"
import clearFormErrors from "@/utils/clearFormErrors"
import showOrHideLoader from "@/utils/showOrHideLoader"
import { FORMTYPES, HTMLELEMENTS, MESSAGES, ROUTES, TOAST, VISIBILITY } from "@/helpers/constants";
import { actions } from 'astro:actions';
import isAdmin from "@/utils/isAdmin";
import getDataAttribute from "@/helpers/getDataAttribute";
import { DEFAULTVALUES } from "@/helpers/constants";
import showToast from "@/utils/showToast";
	const submitLogin = async (formLogin: FormData) => {
		const email = formLogin.get('email')
    	const password = formLogin.get('password')
		const loginInfo = {
			username : email,
			password : password
		}
		showOrHideLoader(HTMLELEMENTS.ID.LOGINLOADER,VISIBILITY.SHOW)
		try {
			const response = await fetch(`${import.meta.env.PUBLIC_URLAPI}auth`, {
				method: 'POST',
				headers: {
				'Content-Type': 'application/json'
				},
				body: JSON.stringify(loginInfo)
			});
			const data = await response.json();
			if (response.ok) {
				await actions.setCookies({
					email: data.email,
					role: data.rol,
					token: data.token
				});
				showOrHideLoader(HTMLELEMENTS.ID.LOGINLOADER,VISIBILITY.HIDDEN)
				if(isAdmin(data.role)) {
					navigate(ROUTES.ADMIN.ACCEPTREQUEST.PATH)

				}else{
					navigate(ROUTES.USER.UPLOADPOKEMONS.PATH)
				}
			} else {
				showError({
					status: false,
					message: data.message,
					nameError : MESSAGES.LOGIN.ERROR.EMAIL.NAME
				} as Validation)
				showOrHideLoader(HTMLELEMENTS.ID.LOGINLOADER,VISIBILITY.HIDDEN)

			}
		} catch (error) {
			showToast(TOAST.TYPES.ERROR,MESSAGES.HTTP.ERROR.UNEXPECTED.TEXT)
			showOrHideLoader(HTMLELEMENTS.ID.LOGINLOADER,VISIBILITY.HIDDEN)

		}

	}

	document.addEventListener(HTMLELEMENTS.EVENTS.ONCLICK, async (event) => {
		const element = event.target as HTMLElement;
		if(element.className.includes(HTMLELEMENTS.INCLUDE.LOGINBUTTON)){
			event.preventDefault()
			showOrHideLoader(HTMLELEMENTS.ID.LOGINLOADER,VISIBILITY.SHOW)
			clearFormErrors(FORMTYPES.LOGIN)
			const formLogin = document.querySelector(HTMLELEMENTS.ID.FORMLOGIN) as HTMLFormElement
			const formData = new FormData(formLogin)
			const isValid : Validation = isValidLogin(formData) as Validation
			if(isValid.status){
				submitLogin(formData)
				clearFormErrors(FORMTYPES.LOGIN)
			}else {
				showError(isValid)
			}
		}
		
		if(element.className.includes(HTMLELEMENTS.INCLUDE.LOGOUTBUTTON)){
			event.preventDefault()
			await actions.clearCookies({});
			navigate(ROUTES.LOGIN)
		}

		if(element.className.includes(HTMLELEMENTS.INCLUDE.BUTTONSACTIONACCEPT)){
			let accept = getDataAttribute(element,'accept-info','boolean')
			const iduser = getDataAttribute(element, 'id-user', 'string'); 
			const idregister = getDataAttribute(element, 'id-register', 'number');
			const userToken = document.querySelector(HTMLELEMENTS.ID.TOKENUSER) as HTMLInputElement
			try{
				const response = await fetch(`${import.meta.env.PUBLIC_URLAPI}admin/accept`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					Authorization: "Bearer " + userToken.value,
				},
				
				body: JSON.stringify({
					accept,
					idregister,
					iduser,

				})
				});
				if(response.ok){
					switch(accept){
						case DEFAULTVALUES.ACCEPT:
							if(MESSAGES.ACCEPT.SUCCESS)
								showToast(TOAST.TYPES.SUCCESS,MESSAGES.ACCEPT.SUCCESS?.TEXT)
							break;
						case DEFAULTVALUES.REJECT:
							if(MESSAGES.ACCEPT.REJECT)
								showToast(TOAST.TYPES.SUCCESS,MESSAGES.ACCEPT.REJECT?.TEXT)
							break;
					}
					navigate(ROUTES.ADMIN.ACCEPTREQUEST.PATH)

				}else{
					showToast(TOAST.TYPES.ERROR,MESSAGES.HTTP.ERROR.UNEXPECTED.TEXT)
				}

			}catch(error){
                showToast(TOAST.TYPES.ERROR,MESSAGES.HTTP.ERROR.UNEXPECTED.TEXT)
			}
			
		}
			
		
	});
</script>
<style is:global>
	.bg-gradient {
		background: linear-gradient(135deg, #135d6e, #667eea 0%, #764ba2 100%);
	}
</style>
